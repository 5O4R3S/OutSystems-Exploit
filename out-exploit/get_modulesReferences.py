from colorama import Fore, Style
import requests
import re
import list_vulnerable_component

def get_module_references(environment,app_module_name,header):

    print(f"{Fore.WHITE}[-] ============================================{Style.RESET_ALL}")
    print(f"{Fore.WHITE}[-] ==> DEPENDENCIES OR REFERENCES TO EXPLORE =={Style.RESET_ALL}")
    print(f"{Fore.WHITE}[-] ============================================{Style.RESET_ALL}")
    print(f"{Fore.WHITE}{Style.BRIGHT}[i] Searching for dependencies in the application...{Style.RESET_ALL}")

    # Enviando uma requisição GET para a URL
    url = environment+'/'+app_module_name+'/scripts/'+app_module_name+'.referencesHealth.js'
    response = requests.get(url, headers=header)

    # Verificando o código de resposta
    if response.status_code == 200:
        # Split the string by lines
        lines = response.text.splitlines()

        # Find lines containing specific keys
        references_lines = [line for line in lines if "//" in line]

        # Expressão regular para capturar o texto entre aspas simples
        # e.g // Reference to producer 'HtmlRenderer' is OK return "HtmlRenderer"
        regex = r"'(.*?)'"

        # Extract values
        for lines in references_lines:
            # Extrai o texto usando a expressão regular
            module_name_filtered = re.findall(regex, lines)[0]

            # Check compromised component
            result = list_vulnerable_component.check_compromised_component(module_name_filtered)

            # Print informations
            if not result:
                # Print informations without warnings
                print(f"[-] {Fore.WHITE}{Style.DIM}[RUNNING] {module_name_filtered}{Style.RESET_ALL}")
            
    else:
        # Erro na requisição
        print("Erro na requisição:", response.status_code)